// Generated by view binder compiler. Do not edit!
package com.example.joinn.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.joinn.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAfterBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button beforeButton;

  @NonNull
  public final Button distanceButton;

  @NonNull
  public final ListView listView;

  @NonNull
  public final Button regButton;

  @NonNull
  public final Button timeButton;

  private FragmentAfterBinding(@NonNull LinearLayout rootView, @NonNull Button beforeButton,
      @NonNull Button distanceButton, @NonNull ListView listView, @NonNull Button regButton,
      @NonNull Button timeButton) {
    this.rootView = rootView;
    this.beforeButton = beforeButton;
    this.distanceButton = distanceButton;
    this.listView = listView;
    this.regButton = regButton;
    this.timeButton = timeButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAfterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAfterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_after, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAfterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.before_button;
      Button beforeButton = ViewBindings.findChildViewById(rootView, id);
      if (beforeButton == null) {
        break missingId;
      }

      id = R.id.distance_button;
      Button distanceButton = ViewBindings.findChildViewById(rootView, id);
      if (distanceButton == null) {
        break missingId;
      }

      id = R.id.listView;
      ListView listView = ViewBindings.findChildViewById(rootView, id);
      if (listView == null) {
        break missingId;
      }

      id = R.id.reg_button;
      Button regButton = ViewBindings.findChildViewById(rootView, id);
      if (regButton == null) {
        break missingId;
      }

      id = R.id.time_button;
      Button timeButton = ViewBindings.findChildViewById(rootView, id);
      if (timeButton == null) {
        break missingId;
      }

      return new FragmentAfterBinding((LinearLayout) rootView, beforeButton, distanceButton,
          listView, regButton, timeButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
