// Generated by view binder compiler. Do not edit!
package com.example.joinn.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.joinn.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import net.daum.mf.map.api.MapView;

public final class FragmentMapBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final EditText locationEditText;

  @NonNull
  public final Button locationSearchBtn;

  @NonNull
  public final MapView mapContainer;

  @NonNull
  public final RelativeLayout mapLayout;

  @NonNull
  public final Button searchButton;

  private FragmentMapBinding(@NonNull RelativeLayout rootView, @NonNull EditText locationEditText,
      @NonNull Button locationSearchBtn, @NonNull MapView mapContainer,
      @NonNull RelativeLayout mapLayout, @NonNull Button searchButton) {
    this.rootView = rootView;
    this.locationEditText = locationEditText;
    this.locationSearchBtn = locationSearchBtn;
    this.mapContainer = mapContainer;
    this.mapLayout = mapLayout;
    this.searchButton = searchButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.location_edit_text;
      EditText locationEditText = ViewBindings.findChildViewById(rootView, id);
      if (locationEditText == null) {
        break missingId;
      }

      id = R.id.location_search_btn;
      Button locationSearchBtn = ViewBindings.findChildViewById(rootView, id);
      if (locationSearchBtn == null) {
        break missingId;
      }

      id = R.id.map_container;
      MapView mapContainer = ViewBindings.findChildViewById(rootView, id);
      if (mapContainer == null) {
        break missingId;
      }

      RelativeLayout mapLayout = (RelativeLayout) rootView;

      id = R.id.search_button;
      Button searchButton = ViewBindings.findChildViewById(rootView, id);
      if (searchButton == null) {
        break missingId;
      }

      return new FragmentMapBinding((RelativeLayout) rootView, locationEditText, locationSearchBtn,
          mapContainer, mapLayout, searchButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
