// Generated by view binder compiler. Do not edit!
package com.example.joinn.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.joinn.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDriverCarImgBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView carImg1;

  @NonNull
  public final ImageView carImg2;

  @NonNull
  public final ImageView carImg3;

  @NonNull
  public final Button carImgBtn;

  @NonNull
  public final Button nextBtn;

  private FragmentDriverCarImgBinding(@NonNull LinearLayout rootView, @NonNull ImageView carImg1,
      @NonNull ImageView carImg2, @NonNull ImageView carImg3, @NonNull Button carImgBtn,
      @NonNull Button nextBtn) {
    this.rootView = rootView;
    this.carImg1 = carImg1;
    this.carImg2 = carImg2;
    this.carImg3 = carImg3;
    this.carImgBtn = carImgBtn;
    this.nextBtn = nextBtn;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDriverCarImgBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDriverCarImgBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_driver_car_img, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDriverCarImgBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.carImg1;
      ImageView carImg1 = ViewBindings.findChildViewById(rootView, id);
      if (carImg1 == null) {
        break missingId;
      }

      id = R.id.carImg2;
      ImageView carImg2 = ViewBindings.findChildViewById(rootView, id);
      if (carImg2 == null) {
        break missingId;
      }

      id = R.id.carImg3;
      ImageView carImg3 = ViewBindings.findChildViewById(rootView, id);
      if (carImg3 == null) {
        break missingId;
      }

      id = R.id.carImgBtn;
      Button carImgBtn = ViewBindings.findChildViewById(rootView, id);
      if (carImgBtn == null) {
        break missingId;
      }

      id = R.id.nextBtn;
      Button nextBtn = ViewBindings.findChildViewById(rootView, id);
      if (nextBtn == null) {
        break missingId;
      }

      return new FragmentDriverCarImgBinding((LinearLayout) rootView, carImg1, carImg2, carImg3,
          carImgBtn, nextBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
